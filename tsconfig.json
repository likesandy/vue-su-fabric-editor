/*
tsconfig.json 编译器的配置文件，ts编译器可以根据它的信息来对代码进行编译
*/
// compilerOptions编译器的选项
{
  "compilerOptions": {
    "target": "esnext", // 转为es的版本 esnext es的最新版本
    "useDefineForClassFields": true,
    "module": "esnext", // 指定要使用的模快化的规范 commonjs amd system umd es6 es2015 es2020 esnext
    "moduleResolution": "node",
    "strict": true, // 所有严格检查的总开关(所有检查都打开)
    /*
    检查
    */
    // "alwaysStrict": true // 用来设置编译后的文件是否使用严格模式 默认false
    // "noImplicitAny": true // 检查是否不允许any类型
    // "noImplicitThis": false // 不允许不明确类型的this
    // "strictNullChecks": false // 严格的检查空值
    "jsx": "preserve",
    "sourceMap": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "esModuleInterop": true,
    "lib": [
      "esnext",
      "dom"
    ], // 用来指定项目要使用的库
    "skipLibCheck": true,
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    // "outDir": "./dist" // 用来指定编译后文件所在目录
    // "outFile": "" // 将代码合并成一个文件
    // "allowJs": false // 是否将js文件进行编译 默认false
    // "checkJs": false // 是否检查js代码语法规范 默认false
    // "removeComments": false // 是否移除注释
    // "noEmit": false // true 不生成编译后的文件
    // "noEmitOnError": false // true 当有错误时 不生成编译后的文件
  },
  "files": [
    "node_modules/vite-plugin-pwa/client.d.ts"
  ],
  // include 用来指定哪些ts文件需要被编译
  // /**任意目录  /*任意文件
  "include": [
    "src/**/*.ts",
    "src/**/*.d.ts",
    "src/**/*.tsx",
    "src/**/*.vue",
    "typings/**/*.ts",
    "./auto-imports.d.ts"
  ],
  "references": [
    {
      "path": "./tsconfig.node.json"
    }
  ]
}